diff --git source/extensions/filters/http/ratelimit/BUILD source/extensions/filters/http/ratelimit/BUILD
index fd4c15c81a..4009c2004c 100644
--- source/extensions/filters/http/ratelimit/BUILD
+++ source/extensions/filters/http/ratelimit/BUILD
@@ -25,6 +25,8 @@ envoy_cc_library(
         "//source/common/common:enum_to_int",
         "//source/common/http:codes_lib",
         "//source/common/router:config_lib",
+        "//source/common/stream_info:uint32_accessor_lib",
+        "//envoy/stream_info:uint32_accessor_interface",
         "//source/extensions/filters/common/ratelimit:ratelimit_client_interface",
         "//source/extensions/filters/common/ratelimit:stat_names_lib",
         "@envoy_api//envoy/extensions/filters/http/ratelimit/v3:pkg_cc_proto",
diff --git source/extensions/filters/http/ratelimit/ratelimit.cc source/extensions/filters/http/ratelimit/ratelimit.cc
index 5a462979be..53de5ee2d7 100644
--- source/extensions/filters/http/ratelimit/ratelimit.cc
+++ source/extensions/filters/http/ratelimit/ratelimit.cc
@@ -11,6 +11,8 @@
 #include "source/common/http/codes.h"
 #include "source/common/http/header_utility.h"
 #include "source/common/router/config_impl.h"
+#include "envoy/stream_info/stream_info.h"
+#include "source/common/stream_info/uint32_accessor_impl.h"
 #include "source/extensions/filters/http/ratelimit/ratelimit_headers.h"
 
 namespace Envoy {
@@ -18,6 +20,23 @@ namespace Extensions {
 namespace HttpFilters {
 namespace RateLimitFilter {
 
+constexpr absl::string_view HitsAddendFilterStateKey = "envoy.ratelimit.hits_addend";
+
+class HitsAddendObjectFactory : public StreamInfo::FilterState::ObjectFactory {
+public:
+  std::string name() const override { return std::string(HitsAddendFilterStateKey); }
+  std::unique_ptr<StreamInfo::FilterState::Object>
+  createFromBytes(absl::string_view data) const override {
+    uint32_t port = 0;
+    if (absl::SimpleAtoi(data, &port)) {
+      return std::make_unique<StreamInfo::UInt32AccessorImpl>(port);
+    }
+    return nullptr;
+  }
+};
+
+REGISTER_FACTORY(HitsAddendObjectFactory, StreamInfo::FilterState::ObjectFactory);
+
 struct RcDetailsValues {
   // This request went above the configured limits for the rate limit filter.
   const std::string RateLimited = "request_rate_limited";
@@ -66,11 +85,21 @@ void Filter::initiateCall(const Http::RequestHeaderMap& headers) {
     break;
   }
 
+  const StreamInfo::UInt32Accessor* hits_addend_filter_state =
+    callbacks_
+        ->streamInfo()
+        .filterState()
+        ->getDataReadOnly<StreamInfo::UInt32Accessor>("envoy.ratelimit.hits_addend");
+  double hits_addend = 0;
+  if (hits_addend_filter_state != nullptr) {
+    hits_addend = hits_addend_filter_state->value();
+  }
+
   if (!descriptors.empty()) {
     state_ = State::Calling;
     initiating_call_ = true;
     client_->limit(*this, getDomain(), descriptors, callbacks_->activeSpan(),
-                   callbacks_->streamInfo(), 0);
+                   callbacks_->streamInfo(), hits_addend);
     initiating_call_ = false;
   }
 }
