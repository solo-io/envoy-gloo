From c11bc45f6eef414d725ead0f927434b852ff75da Mon Sep 17 00:00:00 2001
From: Andy Fong <andy.fong@solo.io>
Date: Mon, 5 May 2025 14:04:42 -0400
Subject: [PATCH] asterisk-url-template-match.patch

---
 source/common/runtime/runtime_features.cc     |  1 +
 source/extensions/path/uri_template_lib/BUILD |  1 +
 .../uri_template_lib/uri_template_internal.cc | 52 +++++++++++--
 .../path/match/uri_template/library_test.cc   | 60 +++++++++++++++
 .../path/rewrite/uri_template/library_test.cc | 56 ++++++++++++++
 .../uri_template_internal_test.cc             | 77 +++++++++++++------
 tools/spelling/spelling_dictionary.txt        |  3 +
 7 files changed, 219 insertions(+), 31 deletions(-)

diff --git a/source/common/runtime/runtime_features.cc b/source/common/runtime/runtime_features.cc
index c055ff949f..83b56634b8 100644
--- a/source/common/runtime/runtime_features.cc
+++ b/source/common/runtime/runtime_features.cc
@@ -103,6 +103,7 @@ RUNTIME_GUARD(envoy_reloadable_features_token_passed_entirely);
 RUNTIME_GUARD(envoy_reloadable_features_uhv_allow_malformed_url_encoding);
 RUNTIME_GUARD(envoy_reloadable_features_upstream_allow_connect_with_2xx);
 RUNTIME_GUARD(envoy_reloadable_features_upstream_wait_for_response_headers_before_disabling_read);
+RUNTIME_GUARD(envoy_reloadable_features_uri_template_match_on_asterisk);
 RUNTIME_GUARD(envoy_reloadable_features_use_cluster_cache_for_alt_protocols_filter);
 RUNTIME_GUARD(envoy_reloadable_features_use_http3_header_normalisation);
 RUNTIME_GUARD(envoy_reloadable_features_validate_connect);
diff --git a/source/extensions/path/uri_template_lib/BUILD b/source/extensions/path/uri_template_lib/BUILD
index dfea1c17ec..3b52f380d5 100644
--- a/source/extensions/path/uri_template_lib/BUILD
+++ b/source/extensions/path/uri_template_lib/BUILD
@@ -22,6 +22,7 @@ envoy_cc_library(
     deps = [
         ":uri_template_internal_cc",
         "//source/common/http:path_utility_lib",
+        "//source/common/runtime:runtime_features_lib",
         "@com_google_absl//absl/status",
         "@com_google_absl//absl/status:statusor",
         "@com_google_absl//absl/strings",
diff --git a/source/extensions/path/uri_template_lib/uri_template_internal.cc b/source/extensions/path/uri_template_lib/uri_template_internal.cc
index 7cec7fed99..305ea2f417 100644
--- a/source/extensions/path/uri_template_lib/uri_template_internal.cc
+++ b/source/extensions/path/uri_template_lib/uri_template_internal.cc
@@ -44,6 +44,16 @@ constexpr absl::string_view kLiteral = "a-zA-Z0-9-._~" // Unreserved
                                        ":@"
                                        "="; // user included "=" allowed
 
+// Additional literal that allows "*" in the pattern.
+// This should replace "kLiteral" after removal of
+// "reloadable_features.uri_template_match_on_asterisk" runtime guard.
+// Valid pchar from https://datatracker.ietf.org/doc/html/rfc3986#appendix-A
+constexpr absl::string_view kLiteralWithAsterisk = "a-zA-Z0-9-._~" // Unreserved
+                                                   "%"             // pct-encoded
+                                                   "!$&'()+,;"     // sub-delims excluding *=
+                                                   ":@"
+                                                   "=*"; // reserved characters
+
 // Default operator used for the variable when none specified.
 constexpr Operator kDefaultVariableOperator = Operator::PathGlob;
 
@@ -120,17 +130,30 @@ std::string ParsedPathPattern::debugString() const {
 }
 
 bool isValidLiteral(absl::string_view literal) {
+  static const std::string* kValidLiteralRegexAsterisk =
+      new std::string(absl::StrCat("^[", kLiteralWithAsterisk, "]+$"));
   static const std::string* kValidLiteralRegex =
       new std::string(absl::StrCat("^[", kLiteral, "]+$"));
+  static const LazyRE2 literal_regex_asterisk = {kValidLiteralRegexAsterisk->data()};
   static const LazyRE2 literal_regex = {kValidLiteralRegex->data()};
-  return RE2::FullMatch(literal, *literal_regex);
+
+  return Runtime::runtimeFeatureEnabled("envoy.reloadable_features.uri_template_match_on_asterisk")
+             ? RE2::FullMatch(literal, *literal_regex_asterisk)
+             : RE2::FullMatch(literal, *literal_regex);
 }
 
 bool isValidRewriteLiteral(absl::string_view literal) {
   static const std::string* kValidLiteralRegex =
       new std::string(absl::StrCat("^[", kLiteral, "/]+$"));
+  static const std::string* kValidLiteralRegexAsterisk =
+      new std::string(absl::StrCat("^[", kLiteralWithAsterisk, "/]+$"));
+
   static const LazyRE2 literal_regex = {kValidLiteralRegex->data()};
-  return RE2::FullMatch(literal, *literal_regex);
+  static const LazyRE2 literal_regex_asterisk = {kValidLiteralRegexAsterisk->data()};
+
+  return Runtime::runtimeFeatureEnabled("envoy.reloadable_features.uri_template_match_on_asterisk")
+             ? RE2::FullMatch(literal, *literal_regex_asterisk)
+             : RE2::FullMatch(literal, *literal_regex);
 }
 
 bool isValidVariableName(absl::string_view variable) {
@@ -352,11 +375,26 @@ std::string toRegexPattern(absl::string_view pattern) {
 std::string toRegexPattern(Operator pattern) {
   static const std::string* kPathGlobRegex = new std::string(absl::StrCat("[", kLiteral, "]+"));
   static const std::string* kTextGlobRegex = new std::string(absl::StrCat("[", kLiteral, "/]*"));
-  switch (pattern) {
-  case Operator::PathGlob: // "*"
-    return *kPathGlobRegex;
-  case Operator::TextGlob: // "**"
-    return *kTextGlobRegex;
+
+  static const std::string* kPathGlobRegexAsterisk =
+      new std::string(absl::StrCat("[", kLiteralWithAsterisk, "]+"));
+  static const std::string* kTextGlobRegexAsterisk =
+      new std::string(absl::StrCat("[", kLiteralWithAsterisk, "/]*"));
+
+  if (Runtime::runtimeFeatureEnabled("envoy.reloadable_features.uri_template_match_on_asterisk")) {
+    switch (pattern) {
+    case Operator::PathGlob: // "*"
+      return *kPathGlobRegexAsterisk;
+    case Operator::TextGlob: // "**"
+      return *kTextGlobRegexAsterisk;
+    }
+  } else {
+    switch (pattern) {
+    case Operator::PathGlob: // "*"
+      return *kPathGlobRegex;
+    case Operator::TextGlob: // "**"
+      return *kTextGlobRegex;
+    }
   }
   return "";
 }
diff --git a/test/extensions/path/match/uri_template/library_test.cc b/test/extensions/path/match/uri_template/library_test.cc
index e154986aa0..002fea5a8c 100644
--- a/test/extensions/path/match/uri_template/library_test.cc
+++ b/test/extensions/path/match/uri_template/library_test.cc
@@ -43,6 +43,66 @@ TEST(MatchTest, BasicUsage) {
   EXPECT_TRUE(matcher->match("/bar/en/us"));
 }
 
+TEST(MatchTest, MatchSingleAsteriskInWildcard) {
+  const std::string yaml_string = R"EOF(
+      name: envoy.path.match.uri_template.uri_template_matcher
+      typed_config:
+        "@type": type.googleapis.com/envoy.extensions.path.match.uri_template.v3.UriTemplateMatchConfig
+        path_template: "/bar/{lang}/{country=**}"
+)EOF";
+
+  Router::PathMatcherSharedPtr matcher = createMatcherFromYaml(yaml_string);
+  EXPECT_EQ(matcher->uriTemplate(), "/bar/{lang}/{country=**}");
+  EXPECT_EQ(matcher->name(), "envoy.path.match.uri_template.uri_template_matcher");
+
+  EXPECT_TRUE(matcher->match("/bar/en/us*"));
+}
+
+TEST(MatchTest, MatchDoubleAsteriskInWildcard) {
+  const std::string yaml_string = R"EOF(
+      name: envoy.path.match.uri_template.uri_template_matcher
+      typed_config:
+        "@type": type.googleapis.com/envoy.extensions.path.match.uri_template.v3.UriTemplateMatchConfig
+        path_template: "/bar/{lang}/{country=**}"
+)EOF";
+
+  Router::PathMatcherSharedPtr matcher = createMatcherFromYaml(yaml_string);
+  EXPECT_EQ(matcher->uriTemplate(), "/bar/{lang}/{country=**}");
+  EXPECT_EQ(matcher->name(), "envoy.path.match.uri_template.uri_template_matcher");
+
+  EXPECT_TRUE(matcher->match("/bar/en/us**"));
+}
+
+TEST(MatchTest, MatchSingleAsterisk) {
+  const std::string yaml_string = R"EOF(
+      name: envoy.path.match.uri_template.uri_template_matcher
+      typed_config:
+        "@type": type.googleapis.com/envoy.extensions.path.match.uri_template.v3.UriTemplateMatchConfig
+        path_template: "/bar/{lang}/{country=**}"
+)EOF";
+
+  Router::PathMatcherSharedPtr matcher = createMatcherFromYaml(yaml_string);
+  EXPECT_EQ(matcher->uriTemplate(), "/bar/{lang}/{country=**}");
+  EXPECT_EQ(matcher->name(), "envoy.path.match.uri_template.uri_template_matcher");
+
+  EXPECT_TRUE(matcher->match("/bar/en*/us"));
+}
+
+TEST(MatchTest, MatchDoubleAsterisk) {
+  const std::string yaml_string = R"EOF(
+      name: envoy.path.match.uri_template.uri_template_matcher
+      typed_config:
+        "@type": type.googleapis.com/envoy.extensions.path.match.uri_template.v3.UriTemplateMatchConfig
+        path_template: "/bar/{lang}/{country=**}"
+)EOF";
+
+  Router::PathMatcherSharedPtr matcher = createMatcherFromYaml(yaml_string);
+  EXPECT_EQ(matcher->uriTemplate(), "/bar/{lang}/{country=**}");
+  EXPECT_EQ(matcher->name(), "envoy.path.match.uri_template.uri_template_matcher");
+
+  EXPECT_TRUE(matcher->match("/bar/en**/us"));
+}
+
 TEST(MatchTest, MatchDoubleEqualsInWildcard) {
   const std::string yaml_string = R"EOF(
       name: envoy.path.match.uri_template.uri_template_matcher
diff --git a/test/extensions/path/rewrite/uri_template/library_test.cc b/test/extensions/path/rewrite/uri_template/library_test.cc
index 6d34771872..4783b8725f 100644
--- a/test/extensions/path/rewrite/uri_template/library_test.cc
+++ b/test/extensions/path/rewrite/uri_template/library_test.cc
@@ -71,6 +71,62 @@ TEST(RewriteTest, BasicUsage) {
   EXPECT_EQ(rewriter->name(), "envoy.path.rewrite.uri_template.uri_template_rewriter");
 }
 
+TEST(RewriteTest, SingleAsteriskAtEndOfPath) {
+  const std::string yaml_string = R"EOF(
+      name: envoy.path.rewrite.uri_template.uri_template_rewriter
+      typed_config:
+        "@type": type.googleapis.com/envoy.extensions.path.rewrite.uri_template.v3.UriTemplateRewriteConfig
+        path_template_rewrite: "/bar/{country}/{final}"
+)EOF";
+
+  Router::PathRewriterSharedPtr rewriter = createRewriterFromYaml(yaml_string);
+  EXPECT_EQ(rewriter->rewritePath("/bar/usa/final*1", "/bar/{final}/{country}").value(),
+            "/bar/final*1/usa");
+  EXPECT_EQ(rewriter->name(), "envoy.path.rewrite.uri_template.uri_template_rewriter");
+}
+
+TEST(RewriteTest, SingleAsterisk) {
+  const std::string yaml_string = R"EOF(
+      name: envoy.path.rewrite.uri_template.uri_template_rewriter
+      typed_config:
+        "@type": type.googleapis.com/envoy.extensions.path.rewrite.uri_template.v3.UriTemplateRewriteConfig
+        path_template_rewrite: "/bar/{country}/final"
+)EOF";
+
+  Router::PathRewriterSharedPtr rewriter = createRewriterFromYaml(yaml_string);
+  EXPECT_EQ(rewriter->rewritePath("/bar/usa*/final", "/bar/{country}/final").value(),
+            "/bar/usa*/final");
+  EXPECT_EQ(rewriter->name(), "envoy.path.rewrite.uri_template.uri_template_rewriter");
+}
+
+TEST(RewriteTest, DoubleAsteriskAtEndOfPath) {
+  const std::string yaml_string = R"EOF(
+      name: envoy.path.rewrite.uri_template.uri_template_rewriter
+      typed_config:
+        "@type": type.googleapis.com/envoy.extensions.path.rewrite.uri_template.v3.UriTemplateRewriteConfig
+        path_template_rewrite: "/bar/{country}/{final}"
+)EOF";
+
+  Router::PathRewriterSharedPtr rewriter = createRewriterFromYaml(yaml_string);
+  EXPECT_EQ(rewriter->rewritePath("/bar/usa/final**1", "/bar/{final}/{country}").value(),
+            "/bar/final**1/usa");
+  EXPECT_EQ(rewriter->name(), "envoy.path.rewrite.uri_template.uri_template_rewriter");
+}
+
+TEST(RewriteTest, DoubleAsterisk) {
+  const std::string yaml_string = R"EOF(
+      name: envoy.path.rewrite.uri_template.uri_template_rewriter
+      typed_config:
+        "@type": type.googleapis.com/envoy.extensions.path.rewrite.uri_template.v3.UriTemplateRewriteConfig
+        path_template_rewrite: "/bar/{country}/final"
+)EOF";
+
+  Router::PathRewriterSharedPtr rewriter = createRewriterFromYaml(yaml_string);
+  EXPECT_EQ(rewriter->rewritePath("/bar/usa**/final", "/bar/{country}/final").value(),
+            "/bar/usa**/final");
+  EXPECT_EQ(rewriter->name(), "envoy.path.rewrite.uri_template.uri_template_rewriter");
+}
+
 TEST(RewriteTest, DoubleEqualAtEndOfPath) {
   const std::string yaml_string = R"EOF(
       name: envoy.path.rewrite.uri_template.uri_template_rewriter
diff --git a/test/extensions/path/uri_template_lib/uri_template_internal_test.cc b/test/extensions/path/uri_template_lib/uri_template_internal_test.cc
index 254eef55ee..6ac17fe517 100644
--- a/test/extensions/path/uri_template_lib/uri_template_internal_test.cc
+++ b/test/extensions/path/uri_template_lib/uri_template_internal_test.cc
@@ -11,6 +11,7 @@
 
 #include "test/test_common/logging.h"
 #include "test/test_common/status_utility.h"
+#include "test/test_common/test_runtime.h"
 #include "test/test_common/utility.h"
 
 #include "absl/strings/str_cat.h"
@@ -29,6 +30,10 @@ namespace {
 using ::Envoy::StatusHelpers::StatusIs;
 
 TEST(InternalParsing, ParsedPathDebugString) {
+  TestScopedRuntime scoped_runtime;
+  scoped_runtime.mergeValues(
+      {{"envoy.reloadable_features.uri_template_match_on_asterisk", "true"}});
+
   ParsedPathPattern patt1 = {
       {
           "abc",
@@ -49,14 +54,23 @@ TEST(InternalParsing, ParsedPathDebugString) {
   EXPECT_EQ(patt2.debugString(), "/{var}");
 }
 
+TEST(InternalParsing, IsValidLiteralAsteriskDisabled) {
+  TestScopedRuntime scoped_runtime;
+  scoped_runtime.mergeValues(
+      {{"envoy.reloadable_features.uri_template_match_on_asterisk", "false"}});
+
+  EXPECT_FALSE(isValidLiteral("ab*c"));
+  EXPECT_FALSE(isValidLiteral("a**c"));
+}
+
 TEST(InternalParsing, IsValidLiteralWorks) {
   EXPECT_TRUE(isValidLiteral("123abcABC"));
   EXPECT_TRUE(isValidLiteral("._~-"));
   EXPECT_TRUE(isValidLiteral("-._~%20!$&'()+,;:@"));
   EXPECT_FALSE(isValidLiteral("`~!@#$%^&()-_+;:,<.>'\"\\| "));
   EXPECT_FALSE(isValidLiteral("abc/"));
-  EXPECT_FALSE(isValidLiteral("ab*c"));
-  EXPECT_FALSE(isValidLiteral("a**c"));
+  EXPECT_TRUE(isValidLiteral("ab*c"));
+  EXPECT_TRUE(isValidLiteral("a**c"));
   EXPECT_TRUE(isValidLiteral("a=c"));
   EXPECT_FALSE(isValidLiteral("?abc"));
   EXPECT_FALSE(isValidLiteral("?a=c"));
@@ -65,6 +79,14 @@ TEST(InternalParsing, IsValidLiteralWorks) {
   EXPECT_FALSE(isValidLiteral("{abc}"));
 }
 
+TEST(InternalParsing, IsValidRewriteAsteriskDisabled) {
+  TestScopedRuntime scoped_runtime;
+  scoped_runtime.mergeValues(
+      {{"envoy.reloadable_features.uri_template_match_on_asterisk", "false"}});
+
+  EXPECT_FALSE(isValidRewriteLiteral("a*c"));
+}
+
 TEST(InternalParsing, IsValidRewriteLiteralWorks) {
   EXPECT_TRUE(isValidRewriteLiteral("123abcABC"));
   EXPECT_TRUE(isValidRewriteLiteral("abc/"));
@@ -76,6 +98,7 @@ TEST(InternalParsing, IsValidRewriteLiteralWorks) {
   EXPECT_FALSE(isValidRewriteLiteral("ab}c"));
   EXPECT_FALSE(isValidRewriteLiteral("ab{c"));
   EXPECT_TRUE(isValidRewriteLiteral("a=c"));
+  EXPECT_TRUE(isValidRewriteLiteral("a*c"));
   EXPECT_FALSE(isValidRewriteLiteral("?a=c"));
 }
 
@@ -151,7 +174,7 @@ class ParseVariableFailure : public testing::TestWithParam<std::string> {};
 
 INSTANTIATE_TEST_SUITE_P(ParseVariableFailureTestSuite, ParseVariableFailure,
                          testing::Values("{var", "{=abc}", "{_var=*}", "{1v}", "{1v=abc}",
-                                         "{var=***}", "{v-a-r}", "{var=*/abc?q=1}", "{var=abc/a*}",
+                                         "{var=***}", "{v-a-r}", "{var=*/abc?q=1}",
                                          "{var=*def/abc}", "{var=}", "{rc=||||(A+yl/}", "/"));
 
 TEST_P(ParseVariableFailure, ParseVariableFailureTest) {
@@ -190,15 +213,13 @@ class ParsePathPatternSyntaxFailure : public testing::TestWithParam<std::string>
 
 INSTANTIATE_TEST_SUITE_P(
     ParsePathPatternSyntaxFailureTestSuite, ParsePathPatternSyntaxFailure,
-    testing::Values("/api/v*/1234", "/api/{version=v*}/1234", "/api/v{versionNum=*}/1234",
-                    "/api/{version=*beta}/1234", "/media/eff456/ll-sd-out.{ext}",
-                    "/media/eff456/ll-sd-out.{ext=*}", "/media/eff456/ll-sd-out.**",
-                    "/media/{country=**}/{lang=*}/**", "/media/**/*/**", "/link/{id=*}/asset*",
-                    "/link/{id=*}/{asset=asset*}", "/media/{id=/*}/*", "/media/{contentId=/**}",
-                    "/api/{version}/{version}", "/api/{version.major}/{version.minor}",
-                    "/media/***", "/media/*{*}*", "/media/{*}/", "/media/*/index?a=2", "media",
-                    "/\001\002\003\004\005\006\007", "/*(/**", "/**/{var}",
-                    "/{var1}/{var2}/{var3}/{var4}/{var5}/{var6}", "/{=*}",
+    testing::Values("/api/v{versionNum=*}/1234", "/api/{version=*beta}/1234",
+                    "/media/eff456/ll-sd-out.{ext}", "/media/eff456/ll-sd-out.{ext=*}",
+                    "/media/{country=**}/{lang=*}/**", "/media/**/*/**", "/media/{id=/*}/*",
+                    "/media/{contentId=/**}", "/api/{version}/{version}",
+                    "/api/{version.major}/{version.minor}", "/media/*{*}*", "/media/{*}/",
+                    "/media/*/index?a=2", "media", "/\001\002\003\004\005\006\007", "/*(/**",
+                    "/**/{var}", "/{var1}/{var2}/{var3}/{var4}/{var5}/{var6}", "/{=*}",
                     "/{var12345678901234=*}"));
 
 TEST_P(ParsePathPatternSyntaxFailure, ParsePathPatternSyntaxFailureTest) {
@@ -267,34 +288,43 @@ TEST(InternalRegexGen, DollarSignMatchesIfself) {
   EXPECT_FALSE(RE2::FullMatch("abc", toRegexPattern("abc$")));
 }
 
-TEST(InternalRegexGen, OperatorRegexPattern) {
+TEST(InternalRegexGen, OperatorRegexPatternAsteriskDisabled) {
+  TestScopedRuntime scoped_runtime;
+  scoped_runtime.mergeValues(
+      {{"envoy.reloadable_features.uri_template_match_on_asterisk", "false"}});
+
   EXPECT_EQ(toRegexPattern(Operator::PathGlob), "[a-zA-Z0-9-._~%!$&'()+,;:@=]+");
   EXPECT_EQ(toRegexPattern(Operator::TextGlob), "[a-zA-Z0-9-._~%!$&'()+,;:@=/]*");
 }
 
+TEST(InternalRegexGen, OperatorRegexPattern) {
+  EXPECT_EQ(toRegexPattern(Operator::PathGlob), "[a-zA-Z0-9-._~%!$&'()+,;:@=*]+");
+  EXPECT_EQ(toRegexPattern(Operator::TextGlob), "[a-zA-Z0-9-._~%!$&'()+,;:@=*/]*");
+}
+
 TEST(InternalRegexGen, PathGlobRegex) {
   EXPECT_TRUE(RE2::FullMatch("abc.123", toRegexPattern(Operator::PathGlob)));
   EXPECT_FALSE(RE2::FullMatch("", toRegexPattern(Operator::PathGlob)));
   EXPECT_FALSE(RE2::FullMatch("abc/123", toRegexPattern(Operator::PathGlob)));
-  EXPECT_FALSE(RE2::FullMatch("*", toRegexPattern(Operator::PathGlob)));
-  EXPECT_FALSE(RE2::FullMatch("**", toRegexPattern(Operator::PathGlob)));
-  EXPECT_FALSE(RE2::FullMatch("abc*123", toRegexPattern(Operator::PathGlob)));
+  EXPECT_TRUE(RE2::FullMatch("*", toRegexPattern(Operator::PathGlob)));
+  EXPECT_TRUE(RE2::FullMatch("**", toRegexPattern(Operator::PathGlob)));
+  EXPECT_TRUE(RE2::FullMatch("abc*123", toRegexPattern(Operator::PathGlob)));
 }
 
 TEST(InternalRegexGen, TextGlobRegex) {
   EXPECT_TRUE(RE2::FullMatch("abc.123", toRegexPattern(Operator::TextGlob)));
   EXPECT_TRUE(RE2::FullMatch("", toRegexPattern(Operator::TextGlob)));
   EXPECT_TRUE(RE2::FullMatch("abc/123", toRegexPattern(Operator::TextGlob)));
-  EXPECT_FALSE(RE2::FullMatch("*", toRegexPattern(Operator::TextGlob)));
-  EXPECT_FALSE(RE2::FullMatch("**", toRegexPattern(Operator::TextGlob)));
-  EXPECT_FALSE(RE2::FullMatch("abc*123", toRegexPattern(Operator::TextGlob)));
+  EXPECT_TRUE(RE2::FullMatch("*", toRegexPattern(Operator::TextGlob)));
+  EXPECT_TRUE(RE2::FullMatch("**", toRegexPattern(Operator::TextGlob)));
+  EXPECT_TRUE(RE2::FullMatch("abc*123", toRegexPattern(Operator::TextGlob)));
 }
 
 TEST(InternalRegexGen, VariableRegexPattern) {
-  EXPECT_EQ(toRegexPattern(Variable("var1", {})), "(?P<var1>[a-zA-Z0-9-._~%!$&'()+,;:@=]+)");
+  EXPECT_EQ(toRegexPattern(Variable("var1", {})), "(?P<var1>[a-zA-Z0-9-._~%!$&'()+,;:@=*]+)");
   EXPECT_EQ(toRegexPattern(Variable("var2", {Operator::PathGlob, "abc", Operator::TextGlob})),
-            "(?P<var2>[a-zA-Z0-9-._~%!$&'()+,;:@=]+/abc/"
-            "[a-zA-Z0-9-._~%!$&'()+,;:@=/]*)");
+            "(?P<var2>[a-zA-Z0-9-._~%!$&'()+,;:@=*]+/abc/"
+            "[a-zA-Z0-9-._~%!$&'()+,;:@=*/]*)");
 }
 
 TEST(InternalRegexGen, VariableRegexDefaultMatch) {
@@ -456,8 +486,7 @@ INSTANTIATE_TEST_SUITE_P(GenPatternRegexWithoutMatchTestSuite, GenPatternRegexWi
                               {"/media/eff456/ll-sd-out.js", "/media/*"},
                               {"/api/v1/1234/", "/api/*/v1/*"},
                               {"/api/v1/1234/broadcasts/get", "/api/*/{resource=*}/{method=*}"},
-                              {"/api/v1/1234/", "/api/*/v1/**"},
-                              {"/api/*/1234/", "/api/*/1234/"}})));
+                              {"/api/v1/1234/", "/api/*/v1/**"}})));
 
 TEST_P(GenPatternRegexWithoutMatch, WithCapture) {
   absl::StatusOr<ParsedPathPattern> pattern = parsePathPatternSyntax(pathPattern());
diff --git a/tools/spelling/spelling_dictionary.txt b/tools/spelling/spelling_dictionary.txt
index 7380ea5a82..5c7c8e01c2 100644
--- a/tools/spelling/spelling_dictionary.txt
+++ b/tools/spelling/spelling_dictionary.txt
@@ -740,6 +740,8 @@ enqueues
 enum
 enums
 environ
+eu
+euprod
 epoll
 errno
 etag
@@ -1067,6 +1069,7 @@ pcall
 pcap
 pchar
 pclose
+pdf
 performant
 pfctl
 pipelined
-- 
2.49.0

