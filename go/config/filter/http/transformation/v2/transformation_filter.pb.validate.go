//go:build !disable_pgv
// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/envoy/config/filter/http/transformation/v2/transformation_filter.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FilterTransformations with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilterTransformations) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilterTransformations with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilterTransformationsMultiError, or nil if none found.
func (m *FilterTransformations) ValidateAll() error {
	return m.validate(true)
}

func (m *FilterTransformations) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransformations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterTransformationsValidationError{
						field:  fmt.Sprintf("Transformations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterTransformationsValidationError{
						field:  fmt.Sprintf("Transformations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterTransformationsValidationError{
					field:  fmt.Sprintf("Transformations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMatcher()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilterTransformationsValidationError{
					field:  "Matcher",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilterTransformationsValidationError{
					field:  "Matcher",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMatcher()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilterTransformationsValidationError{
				field:  "Matcher",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetStage() > 10 {
		err := FilterTransformationsValidationError{
			field:  "Stage",
			reason: "value must be less than or equal to 10",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for LogRequestResponseInfo

	if len(errors) > 0 {
		return FilterTransformationsMultiError(errors)
	}

	return nil
}

// FilterTransformationsMultiError is an error wrapping multiple validation
// errors returned by FilterTransformations.ValidateAll() if the designated
// constraints aren't met.
type FilterTransformationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterTransformationsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterTransformationsMultiError) AllErrors() []error { return m }

// FilterTransformationsValidationError is the validation error returned by
// FilterTransformations.Validate if the designated constraints aren't met.
type FilterTransformationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterTransformationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterTransformationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterTransformationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterTransformationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterTransformationsValidationError) ErrorName() string {
	return "FilterTransformationsValidationError"
}

// Error satisfies the builtin error interface
func (e FilterTransformationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterTransformations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterTransformationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterTransformationsValidationError{}

// Validate checks the field values on TransformationRule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransformationRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransformationRule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransformationRuleMultiError, or nil if none found.
func (m *TransformationRule) ValidateAll() error {
	return m.validate(true)
}

func (m *TransformationRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMatch() == nil {
		err := TransformationRuleValidationError{
			field:  "Match",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMatch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransformationRuleValidationError{
					field:  "Match",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransformationRuleValidationError{
					field:  "Match",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransformationRuleValidationError{
				field:  "Match",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRouteTransformations()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransformationRuleValidationError{
					field:  "RouteTransformations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransformationRuleValidationError{
					field:  "RouteTransformations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRouteTransformations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransformationRuleValidationError{
				field:  "RouteTransformations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransformationRuleMultiError(errors)
	}

	return nil
}

// TransformationRuleMultiError is an error wrapping multiple validation errors
// returned by TransformationRule.ValidateAll() if the designated constraints
// aren't met.
type TransformationRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformationRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformationRuleMultiError) AllErrors() []error { return m }

// TransformationRuleValidationError is the validation error returned by
// TransformationRule.Validate if the designated constraints aren't met.
type TransformationRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformationRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformationRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformationRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformationRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformationRuleValidationError) ErrorName() string {
	return "TransformationRuleValidationError"
}

// Error satisfies the builtin error interface
func (e TransformationRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformationRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformationRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformationRuleValidationError{}

// Validate checks the field values on RouteTransformations with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RouteTransformations) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RouteTransformations with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RouteTransformationsMultiError, or nil if none found.
func (m *RouteTransformations) ValidateAll() error {
	return m.validate(true)
}

func (m *RouteTransformations) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequestTransformation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RouteTransformationsValidationError{
					field:  "RequestTransformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RouteTransformationsValidationError{
					field:  "RequestTransformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestTransformation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteTransformationsValidationError{
				field:  "RequestTransformation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResponseTransformation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RouteTransformationsValidationError{
					field:  "ResponseTransformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RouteTransformationsValidationError{
					field:  "ResponseTransformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponseTransformation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteTransformationsValidationError{
				field:  "ResponseTransformation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClearRouteCache

	for idx, item := range m.GetTransformations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RouteTransformationsValidationError{
						field:  fmt.Sprintf("Transformations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RouteTransformationsValidationError{
						field:  fmt.Sprintf("Transformations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RouteTransformationsValidationError{
					field:  fmt.Sprintf("Transformations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RouteTransformationsMultiError(errors)
	}

	return nil
}

// RouteTransformationsMultiError is an error wrapping multiple validation
// errors returned by RouteTransformations.ValidateAll() if the designated
// constraints aren't met.
type RouteTransformationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RouteTransformationsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RouteTransformationsMultiError) AllErrors() []error { return m }

// RouteTransformationsValidationError is the validation error returned by
// RouteTransformations.Validate if the designated constraints aren't met.
type RouteTransformationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouteTransformationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RouteTransformationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RouteTransformationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RouteTransformationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RouteTransformationsValidationError) ErrorName() string {
	return "RouteTransformationsValidationError"
}

// Error satisfies the builtin error interface
func (e RouteTransformationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRouteTransformations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouteTransformationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouteTransformationsValidationError{}

// Validate checks the field values on ResponseMatcher with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResponseMatcher) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseMatcher with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResponseMatcherMultiError, or nil if none found.
func (m *ResponseMatcher) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseMatcher) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetHeaders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResponseMatcherValidationError{
						field:  fmt.Sprintf("Headers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResponseMatcherValidationError{
						field:  fmt.Sprintf("Headers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponseMatcherValidationError{
					field:  fmt.Sprintf("Headers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetResponseCodeDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponseMatcherValidationError{
					field:  "ResponseCodeDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponseMatcherValidationError{
					field:  "ResponseCodeDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponseCodeDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseMatcherValidationError{
				field:  "ResponseCodeDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResponseMatcherMultiError(errors)
	}

	return nil
}

// ResponseMatcherMultiError is an error wrapping multiple validation errors
// returned by ResponseMatcher.ValidateAll() if the designated constraints
// aren't met.
type ResponseMatcherMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseMatcherMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseMatcherMultiError) AllErrors() []error { return m }

// ResponseMatcherValidationError is the validation error returned by
// ResponseMatcher.Validate if the designated constraints aren't met.
type ResponseMatcherValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseMatcherValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseMatcherValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseMatcherValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseMatcherValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseMatcherValidationError) ErrorName() string { return "ResponseMatcherValidationError" }

// Error satisfies the builtin error interface
func (e ResponseMatcherValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseMatcher.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseMatcherValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseMatcherValidationError{}

// Validate checks the field values on ResponseTransformationRule with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResponseTransformationRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseTransformationRule with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResponseTransformationRuleMultiError, or nil if none found.
func (m *ResponseTransformationRule) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseTransformationRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMatch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponseTransformationRuleValidationError{
					field:  "Match",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponseTransformationRuleValidationError{
					field:  "Match",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseTransformationRuleValidationError{
				field:  "Match",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResponseTransformation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponseTransformationRuleValidationError{
					field:  "ResponseTransformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponseTransformationRuleValidationError{
					field:  "ResponseTransformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponseTransformation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseTransformationRuleValidationError{
				field:  "ResponseTransformation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResponseTransformationRuleMultiError(errors)
	}

	return nil
}

// ResponseTransformationRuleMultiError is an error wrapping multiple
// validation errors returned by ResponseTransformationRule.ValidateAll() if
// the designated constraints aren't met.
type ResponseTransformationRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseTransformationRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseTransformationRuleMultiError) AllErrors() []error { return m }

// ResponseTransformationRuleValidationError is the validation error returned
// by ResponseTransformationRule.Validate if the designated constraints aren't met.
type ResponseTransformationRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseTransformationRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseTransformationRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseTransformationRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseTransformationRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseTransformationRuleValidationError) ErrorName() string {
	return "ResponseTransformationRuleValidationError"
}

// Error satisfies the builtin error interface
func (e ResponseTransformationRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseTransformationRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseTransformationRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseTransformationRuleValidationError{}

// Validate checks the field values on Transformation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Transformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transformation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransformationMultiError,
// or nil if none found.
func (m *Transformation) ValidateAll() error {
	return m.validate(true)
}

func (m *Transformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLogRequestResponseInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransformationValidationError{
					field:  "LogRequestResponseInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransformationValidationError{
					field:  "LogRequestResponseInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLogRequestResponseInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransformationValidationError{
				field:  "LogRequestResponseInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.TransformationType.(type) {
	case *Transformation_TransformationTemplate:
		if v == nil {
			err := TransformationValidationError{
				field:  "TransformationType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTransformationTemplate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformationValidationError{
						field:  "TransformationTemplate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformationValidationError{
						field:  "TransformationTemplate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTransformationTemplate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformationValidationError{
					field:  "TransformationTemplate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Transformation_HeaderBodyTransform:
		if v == nil {
			err := TransformationValidationError{
				field:  "TransformationType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHeaderBodyTransform()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformationValidationError{
						field:  "HeaderBodyTransform",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformationValidationError{
						field:  "HeaderBodyTransform",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHeaderBodyTransform()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformationValidationError{
					field:  "HeaderBodyTransform",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Transformation_TransformerConfig:
		if v == nil {
			err := TransformationValidationError{
				field:  "TransformationType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTransformerConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformationValidationError{
						field:  "TransformerConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformationValidationError{
						field:  "TransformerConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTransformerConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformationValidationError{
					field:  "TransformerConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TransformationMultiError(errors)
	}

	return nil
}

// TransformationMultiError is an error wrapping multiple validation errors
// returned by Transformation.ValidateAll() if the designated constraints
// aren't met.
type TransformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformationMultiError) AllErrors() []error { return m }

// TransformationValidationError is the validation error returned by
// Transformation.Validate if the designated constraints aren't met.
type TransformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformationValidationError) ErrorName() string { return "TransformationValidationError" }

// Error satisfies the builtin error interface
func (e TransformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformationValidationError{}

// Validate checks the field values on Extraction with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Extraction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Extraction with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExtractionMultiError, or
// nil if none found.
func (m *Extraction) ValidateAll() error {
	return m.validate(true)
}

func (m *Extraction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Regex

	// no validation rules for Subgroup

	if all {
		switch v := interface{}(m.GetReplacementText()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExtractionValidationError{
					field:  "ReplacementText",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExtractionValidationError{
					field:  "ReplacementText",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReplacementText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExtractionValidationError{
				field:  "ReplacementText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Mode

	switch v := m.Source.(type) {
	case *Extraction_Header:
		if v == nil {
			err := ExtractionValidationError{
				field:  "Source",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Header
	case *Extraction_Body:
		if v == nil {
			err := ExtractionValidationError{
				field:  "Source",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBody()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExtractionValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExtractionValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExtractionValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ExtractionMultiError(errors)
	}

	return nil
}

// ExtractionMultiError is an error wrapping multiple validation errors
// returned by Extraction.ValidateAll() if the designated constraints aren't met.
type ExtractionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtractionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtractionMultiError) AllErrors() []error { return m }

// ExtractionValidationError is the validation error returned by
// Extraction.Validate if the designated constraints aren't met.
type ExtractionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtractionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtractionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtractionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtractionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtractionValidationError) ErrorName() string { return "ExtractionValidationError" }

// Error satisfies the builtin error interface
func (e ExtractionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtraction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtractionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtractionValidationError{}

// Validate checks the field values on TransformationTemplate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransformationTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransformationTemplate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransformationTemplateMultiError, or nil if none found.
func (m *TransformationTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *TransformationTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdvancedTemplates

	{
		sorted_keys := make([]string, len(m.GetExtractors()))
		i := 0
		for key := range m.GetExtractors() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetExtractors()[key]
			_ = val

			// no validation rules for Extractors[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, TransformationTemplateValidationError{
							field:  fmt.Sprintf("Extractors[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, TransformationTemplateValidationError{
							field:  fmt.Sprintf("Extractors[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return TransformationTemplateValidationError{
						field:  fmt.Sprintf("Extractors[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetDataSources()))
		i := 0
		for key := range m.GetDataSources() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetDataSources()[key]
			_ = val

			// no validation rules for DataSources[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, TransformationTemplateValidationError{
							field:  fmt.Sprintf("DataSources[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, TransformationTemplateValidationError{
							field:  fmt.Sprintf("DataSources[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return TransformationTemplateValidationError{
						field:  fmt.Sprintf("DataSources[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for DataSourceMaxSize

	{
		sorted_keys := make([]string, len(m.GetHeaders()))
		i := 0
		for key := range m.GetHeaders() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetHeaders()[key]
			_ = val

			// no validation rules for Headers[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, TransformationTemplateValidationError{
							field:  fmt.Sprintf("Headers[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, TransformationTemplateValidationError{
							field:  fmt.Sprintf("Headers[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return TransformationTemplateValidationError{
						field:  fmt.Sprintf("Headers[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetHeadersToAppend() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformationTemplateValidationError{
						field:  fmt.Sprintf("HeadersToAppend[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformationTemplateValidationError{
						field:  fmt.Sprintf("HeadersToAppend[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformationTemplateValidationError{
					field:  fmt.Sprintf("HeadersToAppend[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ParseBodyBehavior

	// no validation rules for IgnoreErrorOnParse

	for idx, item := range m.GetDynamicMetadataValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformationTemplateValidationError{
						field:  fmt.Sprintf("DynamicMetadataValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformationTemplateValidationError{
						field:  fmt.Sprintf("DynamicMetadataValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformationTemplateValidationError{
					field:  fmt.Sprintf("DynamicMetadataValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for EscapeCharacters

	// no validation rules for StringDelimiter

	if all {
		switch v := interface{}(m.GetSpanTransformer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransformationTemplateValidationError{
					field:  "SpanTransformer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransformationTemplateValidationError{
					field:  "SpanTransformer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpanTransformer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransformationTemplateValidationError{
				field:  "SpanTransformer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.BodyTransformation.(type) {
	case *TransformationTemplate_Body:
		if v == nil {
			err := TransformationTemplateValidationError{
				field:  "BodyTransformation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBody()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformationTemplateValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformationTemplateValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformationTemplateValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformationTemplate_Passthrough:
		if v == nil {
			err := TransformationTemplateValidationError{
				field:  "BodyTransformation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPassthrough()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformationTemplateValidationError{
						field:  "Passthrough",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformationTemplateValidationError{
						field:  "Passthrough",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPassthrough()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformationTemplateValidationError{
					field:  "Passthrough",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformationTemplate_MergeExtractorsToBody:
		if v == nil {
			err := TransformationTemplateValidationError{
				field:  "BodyTransformation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMergeExtractorsToBody()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformationTemplateValidationError{
						field:  "MergeExtractorsToBody",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformationTemplateValidationError{
						field:  "MergeExtractorsToBody",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMergeExtractorsToBody()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformationTemplateValidationError{
					field:  "MergeExtractorsToBody",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformationTemplate_MergeJsonKeys:
		if v == nil {
			err := TransformationTemplateValidationError{
				field:  "BodyTransformation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMergeJsonKeys()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformationTemplateValidationError{
						field:  "MergeJsonKeys",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformationTemplateValidationError{
						field:  "MergeJsonKeys",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMergeJsonKeys()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformationTemplateValidationError{
					field:  "MergeJsonKeys",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TransformationTemplateMultiError(errors)
	}

	return nil
}

// TransformationTemplateMultiError is an error wrapping multiple validation
// errors returned by TransformationTemplate.ValidateAll() if the designated
// constraints aren't met.
type TransformationTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformationTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformationTemplateMultiError) AllErrors() []error { return m }

// TransformationTemplateValidationError is the validation error returned by
// TransformationTemplate.Validate if the designated constraints aren't met.
type TransformationTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformationTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformationTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformationTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformationTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformationTemplateValidationError) ErrorName() string {
	return "TransformationTemplateValidationError"
}

// Error satisfies the builtin error interface
func (e TransformationTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformationTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformationTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformationTemplateValidationError{}

// Validate checks the field values on InjaTemplate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InjaTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InjaTemplate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InjaTemplateMultiError, or
// nil if none found.
func (m *InjaTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *InjaTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Text

	if len(errors) > 0 {
		return InjaTemplateMultiError(errors)
	}

	return nil
}

// InjaTemplateMultiError is an error wrapping multiple validation errors
// returned by InjaTemplate.ValidateAll() if the designated constraints aren't met.
type InjaTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InjaTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InjaTemplateMultiError) AllErrors() []error { return m }

// InjaTemplateValidationError is the validation error returned by
// InjaTemplate.Validate if the designated constraints aren't met.
type InjaTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InjaTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InjaTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InjaTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InjaTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InjaTemplateValidationError) ErrorName() string { return "InjaTemplateValidationError" }

// Error satisfies the builtin error interface
func (e InjaTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInjaTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InjaTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InjaTemplateValidationError{}

// Validate checks the field values on Passthrough with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Passthrough) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Passthrough with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PassthroughMultiError, or
// nil if none found.
func (m *Passthrough) ValidateAll() error {
	return m.validate(true)
}

func (m *Passthrough) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PassthroughMultiError(errors)
	}

	return nil
}

// PassthroughMultiError is an error wrapping multiple validation errors
// returned by Passthrough.ValidateAll() if the designated constraints aren't met.
type PassthroughMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PassthroughMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PassthroughMultiError) AllErrors() []error { return m }

// PassthroughValidationError is the validation error returned by
// Passthrough.Validate if the designated constraints aren't met.
type PassthroughValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PassthroughValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PassthroughValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PassthroughValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PassthroughValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PassthroughValidationError) ErrorName() string { return "PassthroughValidationError" }

// Error satisfies the builtin error interface
func (e PassthroughValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPassthrough.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PassthroughValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PassthroughValidationError{}

// Validate checks the field values on MergeExtractorsToBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MergeExtractorsToBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MergeExtractorsToBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MergeExtractorsToBodyMultiError, or nil if none found.
func (m *MergeExtractorsToBody) ValidateAll() error {
	return m.validate(true)
}

func (m *MergeExtractorsToBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MergeExtractorsToBodyMultiError(errors)
	}

	return nil
}

// MergeExtractorsToBodyMultiError is an error wrapping multiple validation
// errors returned by MergeExtractorsToBody.ValidateAll() if the designated
// constraints aren't met.
type MergeExtractorsToBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MergeExtractorsToBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MergeExtractorsToBodyMultiError) AllErrors() []error { return m }

// MergeExtractorsToBodyValidationError is the validation error returned by
// MergeExtractorsToBody.Validate if the designated constraints aren't met.
type MergeExtractorsToBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MergeExtractorsToBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MergeExtractorsToBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MergeExtractorsToBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MergeExtractorsToBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MergeExtractorsToBodyValidationError) ErrorName() string {
	return "MergeExtractorsToBodyValidationError"
}

// Error satisfies the builtin error interface
func (e MergeExtractorsToBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMergeExtractorsToBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MergeExtractorsToBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MergeExtractorsToBodyValidationError{}

// Validate checks the field values on MergeJsonKeys with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MergeJsonKeys) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MergeJsonKeys with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MergeJsonKeysMultiError, or
// nil if none found.
func (m *MergeJsonKeys) ValidateAll() error {
	return m.validate(true)
}

func (m *MergeJsonKeys) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetJsonKeys()))
		i := 0
		for key := range m.GetJsonKeys() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetJsonKeys()[key]
			_ = val

			// no validation rules for JsonKeys[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, MergeJsonKeysValidationError{
							field:  fmt.Sprintf("JsonKeys[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, MergeJsonKeysValidationError{
							field:  fmt.Sprintf("JsonKeys[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return MergeJsonKeysValidationError{
						field:  fmt.Sprintf("JsonKeys[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return MergeJsonKeysMultiError(errors)
	}

	return nil
}

// MergeJsonKeysMultiError is an error wrapping multiple validation errors
// returned by MergeJsonKeys.ValidateAll() if the designated constraints
// aren't met.
type MergeJsonKeysMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MergeJsonKeysMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MergeJsonKeysMultiError) AllErrors() []error { return m }

// MergeJsonKeysValidationError is the validation error returned by
// MergeJsonKeys.Validate if the designated constraints aren't met.
type MergeJsonKeysValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MergeJsonKeysValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MergeJsonKeysValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MergeJsonKeysValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MergeJsonKeysValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MergeJsonKeysValidationError) ErrorName() string { return "MergeJsonKeysValidationError" }

// Error satisfies the builtin error interface
func (e MergeJsonKeysValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMergeJsonKeys.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MergeJsonKeysValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MergeJsonKeysValidationError{}

// Validate checks the field values on HeaderBodyTransform with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HeaderBodyTransform) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HeaderBodyTransform with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HeaderBodyTransformMultiError, or nil if none found.
func (m *HeaderBodyTransform) ValidateAll() error {
	return m.validate(true)
}

func (m *HeaderBodyTransform) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddRequestMetadata

	if len(errors) > 0 {
		return HeaderBodyTransformMultiError(errors)
	}

	return nil
}

// HeaderBodyTransformMultiError is an error wrapping multiple validation
// errors returned by HeaderBodyTransform.ValidateAll() if the designated
// constraints aren't met.
type HeaderBodyTransformMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeaderBodyTransformMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeaderBodyTransformMultiError) AllErrors() []error { return m }

// HeaderBodyTransformValidationError is the validation error returned by
// HeaderBodyTransform.Validate if the designated constraints aren't met.
type HeaderBodyTransformValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeaderBodyTransformValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeaderBodyTransformValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeaderBodyTransformValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeaderBodyTransformValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeaderBodyTransformValidationError) ErrorName() string {
	return "HeaderBodyTransformValidationError"
}

// Error satisfies the builtin error interface
func (e HeaderBodyTransformValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeaderBodyTransform.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeaderBodyTransformValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeaderBodyTransformValidationError{}

// Validate checks the field values on TransformationRule_Transformations with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TransformationRule_Transformations) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransformationRule_Transformations
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TransformationRule_TransformationsMultiError, or nil if none found.
func (m *TransformationRule_Transformations) ValidateAll() error {
	return m.validate(true)
}

func (m *TransformationRule_Transformations) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequestTransformation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransformationRule_TransformationsValidationError{
					field:  "RequestTransformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransformationRule_TransformationsValidationError{
					field:  "RequestTransformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestTransformation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransformationRule_TransformationsValidationError{
				field:  "RequestTransformation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClearRouteCache

	if all {
		switch v := interface{}(m.GetResponseTransformation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransformationRule_TransformationsValidationError{
					field:  "ResponseTransformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransformationRule_TransformationsValidationError{
					field:  "ResponseTransformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponseTransformation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransformationRule_TransformationsValidationError{
				field:  "ResponseTransformation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOnStreamCompletionTransformation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransformationRule_TransformationsValidationError{
					field:  "OnStreamCompletionTransformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransformationRule_TransformationsValidationError{
					field:  "OnStreamCompletionTransformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOnStreamCompletionTransformation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransformationRule_TransformationsValidationError{
				field:  "OnStreamCompletionTransformation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransformationRule_TransformationsMultiError(errors)
	}

	return nil
}

// TransformationRule_TransformationsMultiError is an error wrapping multiple
// validation errors returned by
// TransformationRule_Transformations.ValidateAll() if the designated
// constraints aren't met.
type TransformationRule_TransformationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformationRule_TransformationsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformationRule_TransformationsMultiError) AllErrors() []error { return m }

// TransformationRule_TransformationsValidationError is the validation error
// returned by TransformationRule_Transformations.Validate if the designated
// constraints aren't met.
type TransformationRule_TransformationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformationRule_TransformationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformationRule_TransformationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformationRule_TransformationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformationRule_TransformationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformationRule_TransformationsValidationError) ErrorName() string {
	return "TransformationRule_TransformationsValidationError"
}

// Error satisfies the builtin error interface
func (e TransformationRule_TransformationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformationRule_Transformations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformationRule_TransformationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformationRule_TransformationsValidationError{}

// Validate checks the field values on RouteTransformations_RouteTransformation
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RouteTransformations_RouteTransformation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RouteTransformations_RouteTransformation with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RouteTransformations_RouteTransformationMultiError, or nil if none found.
func (m *RouteTransformations_RouteTransformation) ValidateAll() error {
	return m.validate(true)
}

func (m *RouteTransformations_RouteTransformation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStage() > 10 {
		err := RouteTransformations_RouteTransformationValidationError{
			field:  "Stage",
			reason: "value must be less than or equal to 10",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMatcher()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RouteTransformations_RouteTransformationValidationError{
					field:  "Matcher",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RouteTransformations_RouteTransformationValidationError{
					field:  "Matcher",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMatcher()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteTransformations_RouteTransformationValidationError{
				field:  "Matcher",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	oneofMatchPresent := false
	switch v := m.Match.(type) {
	case *RouteTransformations_RouteTransformation_RequestMatch_:
		if v == nil {
			err := RouteTransformations_RouteTransformationValidationError{
				field:  "Match",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofMatchPresent = true

		if all {
			switch v := interface{}(m.GetRequestMatch()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RouteTransformations_RouteTransformationValidationError{
						field:  "RequestMatch",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RouteTransformations_RouteTransformationValidationError{
						field:  "RequestMatch",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRequestMatch()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RouteTransformations_RouteTransformationValidationError{
					field:  "RequestMatch",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RouteTransformations_RouteTransformation_ResponseMatch_:
		if v == nil {
			err := RouteTransformations_RouteTransformationValidationError{
				field:  "Match",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofMatchPresent = true

		if all {
			switch v := interface{}(m.GetResponseMatch()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RouteTransformations_RouteTransformationValidationError{
						field:  "ResponseMatch",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RouteTransformations_RouteTransformationValidationError{
						field:  "ResponseMatch",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResponseMatch()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RouteTransformations_RouteTransformationValidationError{
					field:  "ResponseMatch",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofMatchPresent {
		err := RouteTransformations_RouteTransformationValidationError{
			field:  "Match",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RouteTransformations_RouteTransformationMultiError(errors)
	}

	return nil
}

// RouteTransformations_RouteTransformationMultiError is an error wrapping
// multiple validation errors returned by
// RouteTransformations_RouteTransformation.ValidateAll() if the designated
// constraints aren't met.
type RouteTransformations_RouteTransformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RouteTransformations_RouteTransformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RouteTransformations_RouteTransformationMultiError) AllErrors() []error { return m }

// RouteTransformations_RouteTransformationValidationError is the validation
// error returned by RouteTransformations_RouteTransformation.Validate if the
// designated constraints aren't met.
type RouteTransformations_RouteTransformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouteTransformations_RouteTransformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RouteTransformations_RouteTransformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RouteTransformations_RouteTransformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RouteTransformations_RouteTransformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RouteTransformations_RouteTransformationValidationError) ErrorName() string {
	return "RouteTransformations_RouteTransformationValidationError"
}

// Error satisfies the builtin error interface
func (e RouteTransformations_RouteTransformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRouteTransformations_RouteTransformation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouteTransformations_RouteTransformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouteTransformations_RouteTransformationValidationError{}

// Validate checks the field values on
// RouteTransformations_RouteTransformation_RequestMatch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RouteTransformations_RouteTransformation_RequestMatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RouteTransformations_RouteTransformation_RequestMatch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RouteTransformations_RouteTransformation_RequestMatchMultiError, or nil if
// none found.
func (m *RouteTransformations_RouteTransformation_RequestMatch) ValidateAll() error {
	return m.validate(true)
}

func (m *RouteTransformations_RouteTransformation_RequestMatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMatch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RouteTransformations_RouteTransformation_RequestMatchValidationError{
					field:  "Match",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RouteTransformations_RouteTransformation_RequestMatchValidationError{
					field:  "Match",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteTransformations_RouteTransformation_RequestMatchValidationError{
				field:  "Match",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestTransformation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RouteTransformations_RouteTransformation_RequestMatchValidationError{
					field:  "RequestTransformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RouteTransformations_RouteTransformation_RequestMatchValidationError{
					field:  "RequestTransformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestTransformation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteTransformations_RouteTransformation_RequestMatchValidationError{
				field:  "RequestTransformation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResponseTransformation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RouteTransformations_RouteTransformation_RequestMatchValidationError{
					field:  "ResponseTransformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RouteTransformations_RouteTransformation_RequestMatchValidationError{
					field:  "ResponseTransformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponseTransformation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteTransformations_RouteTransformation_RequestMatchValidationError{
				field:  "ResponseTransformation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClearRouteCache

	if len(errors) > 0 {
		return RouteTransformations_RouteTransformation_RequestMatchMultiError(errors)
	}

	return nil
}

// RouteTransformations_RouteTransformation_RequestMatchMultiError is an error
// wrapping multiple validation errors returned by
// RouteTransformations_RouteTransformation_RequestMatch.ValidateAll() if the
// designated constraints aren't met.
type RouteTransformations_RouteTransformation_RequestMatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RouteTransformations_RouteTransformation_RequestMatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RouteTransformations_RouteTransformation_RequestMatchMultiError) AllErrors() []error {
	return m
}

// RouteTransformations_RouteTransformation_RequestMatchValidationError is the
// validation error returned by
// RouteTransformations_RouteTransformation_RequestMatch.Validate if the
// designated constraints aren't met.
type RouteTransformations_RouteTransformation_RequestMatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouteTransformations_RouteTransformation_RequestMatchValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RouteTransformations_RouteTransformation_RequestMatchValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RouteTransformations_RouteTransformation_RequestMatchValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RouteTransformations_RouteTransformation_RequestMatchValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RouteTransformations_RouteTransformation_RequestMatchValidationError) ErrorName() string {
	return "RouteTransformations_RouteTransformation_RequestMatchValidationError"
}

// Error satisfies the builtin error interface
func (e RouteTransformations_RouteTransformation_RequestMatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRouteTransformations_RouteTransformation_RequestMatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouteTransformations_RouteTransformation_RequestMatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouteTransformations_RouteTransformation_RequestMatchValidationError{}

// Validate checks the field values on
// RouteTransformations_RouteTransformation_ResponseMatch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RouteTransformations_RouteTransformation_ResponseMatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RouteTransformations_RouteTransformation_ResponseMatch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RouteTransformations_RouteTransformation_ResponseMatchMultiError, or nil if
// none found.
func (m *RouteTransformations_RouteTransformation_ResponseMatch) ValidateAll() error {
	return m.validate(true)
}

func (m *RouteTransformations_RouteTransformation_ResponseMatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMatch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RouteTransformations_RouteTransformation_ResponseMatchValidationError{
					field:  "Match",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RouteTransformations_RouteTransformation_ResponseMatchValidationError{
					field:  "Match",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteTransformations_RouteTransformation_ResponseMatchValidationError{
				field:  "Match",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResponseTransformation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RouteTransformations_RouteTransformation_ResponseMatchValidationError{
					field:  "ResponseTransformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RouteTransformations_RouteTransformation_ResponseMatchValidationError{
					field:  "ResponseTransformation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponseTransformation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteTransformations_RouteTransformation_ResponseMatchValidationError{
				field:  "ResponseTransformation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RouteTransformations_RouteTransformation_ResponseMatchMultiError(errors)
	}

	return nil
}

// RouteTransformations_RouteTransformation_ResponseMatchMultiError is an error
// wrapping multiple validation errors returned by
// RouteTransformations_RouteTransformation_ResponseMatch.ValidateAll() if the
// designated constraints aren't met.
type RouteTransformations_RouteTransformation_ResponseMatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RouteTransformations_RouteTransformation_ResponseMatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RouteTransformations_RouteTransformation_ResponseMatchMultiError) AllErrors() []error {
	return m
}

// RouteTransformations_RouteTransformation_ResponseMatchValidationError is the
// validation error returned by
// RouteTransformations_RouteTransformation_ResponseMatch.Validate if the
// designated constraints aren't met.
type RouteTransformations_RouteTransformation_ResponseMatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouteTransformations_RouteTransformation_ResponseMatchValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RouteTransformations_RouteTransformation_ResponseMatchValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RouteTransformations_RouteTransformation_ResponseMatchValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RouteTransformations_RouteTransformation_ResponseMatchValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RouteTransformations_RouteTransformation_ResponseMatchValidationError) ErrorName() string {
	return "RouteTransformations_RouteTransformation_ResponseMatchValidationError"
}

// Error satisfies the builtin error interface
func (e RouteTransformations_RouteTransformation_ResponseMatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRouteTransformations_RouteTransformation_ResponseMatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouteTransformations_RouteTransformation_ResponseMatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouteTransformations_RouteTransformation_ResponseMatchValidationError{}

// Validate checks the field values on TransformationTemplate_HeaderToAppend
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TransformationTemplate_HeaderToAppend) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransformationTemplate_HeaderToAppend
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TransformationTemplate_HeaderToAppendMultiError, or nil if none found.
func (m *TransformationTemplate_HeaderToAppend) ValidateAll() error {
	return m.validate(true)
}

func (m *TransformationTemplate_HeaderToAppend) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransformationTemplate_HeaderToAppendValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransformationTemplate_HeaderToAppendValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransformationTemplate_HeaderToAppendValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransformationTemplate_HeaderToAppendMultiError(errors)
	}

	return nil
}

// TransformationTemplate_HeaderToAppendMultiError is an error wrapping
// multiple validation errors returned by
// TransformationTemplate_HeaderToAppend.ValidateAll() if the designated
// constraints aren't met.
type TransformationTemplate_HeaderToAppendMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformationTemplate_HeaderToAppendMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformationTemplate_HeaderToAppendMultiError) AllErrors() []error { return m }

// TransformationTemplate_HeaderToAppendValidationError is the validation error
// returned by TransformationTemplate_HeaderToAppend.Validate if the
// designated constraints aren't met.
type TransformationTemplate_HeaderToAppendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformationTemplate_HeaderToAppendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformationTemplate_HeaderToAppendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformationTemplate_HeaderToAppendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformationTemplate_HeaderToAppendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformationTemplate_HeaderToAppendValidationError) ErrorName() string {
	return "TransformationTemplate_HeaderToAppendValidationError"
}

// Error satisfies the builtin error interface
func (e TransformationTemplate_HeaderToAppendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformationTemplate_HeaderToAppend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformationTemplate_HeaderToAppendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformationTemplate_HeaderToAppendValidationError{}

// Validate checks the field values on
// TransformationTemplate_DynamicMetadataValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TransformationTemplate_DynamicMetadataValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TransformationTemplate_DynamicMetadataValue with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TransformationTemplate_DynamicMetadataValueMultiError, or nil if none found.
func (m *TransformationTemplate_DynamicMetadataValue) ValidateAll() error {
	return m.validate(true)
}

func (m *TransformationTemplate_DynamicMetadataValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MetadataNamespace

	if len(m.GetKey()) < 1 {
		err := TransformationTemplate_DynamicMetadataValueValidationError{
			field:  "Key",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransformationTemplate_DynamicMetadataValueValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransformationTemplate_DynamicMetadataValueValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransformationTemplate_DynamicMetadataValueValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for JsonToProto

	if len(errors) > 0 {
		return TransformationTemplate_DynamicMetadataValueMultiError(errors)
	}

	return nil
}

// TransformationTemplate_DynamicMetadataValueMultiError is an error wrapping
// multiple validation errors returned by
// TransformationTemplate_DynamicMetadataValue.ValidateAll() if the designated
// constraints aren't met.
type TransformationTemplate_DynamicMetadataValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformationTemplate_DynamicMetadataValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformationTemplate_DynamicMetadataValueMultiError) AllErrors() []error { return m }

// TransformationTemplate_DynamicMetadataValueValidationError is the validation
// error returned by TransformationTemplate_DynamicMetadataValue.Validate if
// the designated constraints aren't met.
type TransformationTemplate_DynamicMetadataValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformationTemplate_DynamicMetadataValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformationTemplate_DynamicMetadataValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformationTemplate_DynamicMetadataValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformationTemplate_DynamicMetadataValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformationTemplate_DynamicMetadataValueValidationError) ErrorName() string {
	return "TransformationTemplate_DynamicMetadataValueValidationError"
}

// Error satisfies the builtin error interface
func (e TransformationTemplate_DynamicMetadataValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformationTemplate_DynamicMetadataValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformationTemplate_DynamicMetadataValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformationTemplate_DynamicMetadataValueValidationError{}

// Validate checks the field values on TransformationTemplate_SpanTransformer
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TransformationTemplate_SpanTransformer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TransformationTemplate_SpanTransformer with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// TransformationTemplate_SpanTransformerMultiError, or nil if none found.
func (m *TransformationTemplate_SpanTransformer) ValidateAll() error {
	return m.validate(true)
}

func (m *TransformationTemplate_SpanTransformer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransformationTemplate_SpanTransformerValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransformationTemplate_SpanTransformerValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransformationTemplate_SpanTransformerValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransformationTemplate_SpanTransformerMultiError(errors)
	}

	return nil
}

// TransformationTemplate_SpanTransformerMultiError is an error wrapping
// multiple validation errors returned by
// TransformationTemplate_SpanTransformer.ValidateAll() if the designated
// constraints aren't met.
type TransformationTemplate_SpanTransformerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformationTemplate_SpanTransformerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformationTemplate_SpanTransformerMultiError) AllErrors() []error { return m }

// TransformationTemplate_SpanTransformerValidationError is the validation
// error returned by TransformationTemplate_SpanTransformer.Validate if the
// designated constraints aren't met.
type TransformationTemplate_SpanTransformerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformationTemplate_SpanTransformerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformationTemplate_SpanTransformerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformationTemplate_SpanTransformerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformationTemplate_SpanTransformerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformationTemplate_SpanTransformerValidationError) ErrorName() string {
	return "TransformationTemplate_SpanTransformerValidationError"
}

// Error satisfies the builtin error interface
func (e TransformationTemplate_SpanTransformerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformationTemplate_SpanTransformer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformationTemplate_SpanTransformerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformationTemplate_SpanTransformerValidationError{}

// Validate checks the field values on MergeJsonKeys_OverridableTemplate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MergeJsonKeys_OverridableTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MergeJsonKeys_OverridableTemplate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MergeJsonKeys_OverridableTemplateMultiError, or nil if none found.
func (m *MergeJsonKeys_OverridableTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *MergeJsonKeys_OverridableTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTmpl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MergeJsonKeys_OverridableTemplateValidationError{
					field:  "Tmpl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MergeJsonKeys_OverridableTemplateValidationError{
					field:  "Tmpl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTmpl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MergeJsonKeys_OverridableTemplateValidationError{
				field:  "Tmpl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OverrideEmpty

	if len(errors) > 0 {
		return MergeJsonKeys_OverridableTemplateMultiError(errors)
	}

	return nil
}

// MergeJsonKeys_OverridableTemplateMultiError is an error wrapping multiple
// validation errors returned by
// MergeJsonKeys_OverridableTemplate.ValidateAll() if the designated
// constraints aren't met.
type MergeJsonKeys_OverridableTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MergeJsonKeys_OverridableTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MergeJsonKeys_OverridableTemplateMultiError) AllErrors() []error { return m }

// MergeJsonKeys_OverridableTemplateValidationError is the validation error
// returned by MergeJsonKeys_OverridableTemplate.Validate if the designated
// constraints aren't met.
type MergeJsonKeys_OverridableTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MergeJsonKeys_OverridableTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MergeJsonKeys_OverridableTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MergeJsonKeys_OverridableTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MergeJsonKeys_OverridableTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MergeJsonKeys_OverridableTemplateValidationError) ErrorName() string {
	return "MergeJsonKeys_OverridableTemplateValidationError"
}

// Error satisfies the builtin error interface
func (e MergeJsonKeys_OverridableTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMergeJsonKeys_OverridableTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MergeJsonKeys_OverridableTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MergeJsonKeys_OverridableTemplateValidationError{}
