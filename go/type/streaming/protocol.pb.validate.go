//go:build !disable_pgv
// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/envoy/type/streaming/protocol.proto

package streaming

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PubMsg with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PubMsg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PubMsg with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PubMsgMultiError, or nil if none found.
func (m *PubMsg) ValidateAll() error {
	return m.validate(true)
}

func (m *PubMsg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientID

	// no validation rules for Guid

	// no validation rules for Subject

	// no validation rules for Reply

	// no validation rules for Data

	// no validation rules for Sha256

	if len(errors) > 0 {
		return PubMsgMultiError(errors)
	}

	return nil
}

// PubMsgMultiError is an error wrapping multiple validation errors returned by
// PubMsg.ValidateAll() if the designated constraints aren't met.
type PubMsgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PubMsgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PubMsgMultiError) AllErrors() []error { return m }

// PubMsgValidationError is the validation error returned by PubMsg.Validate if
// the designated constraints aren't met.
type PubMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PubMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PubMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PubMsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PubMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PubMsgValidationError) ErrorName() string { return "PubMsgValidationError" }

// Error satisfies the builtin error interface
func (e PubMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPubMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PubMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PubMsgValidationError{}

// Validate checks the field values on PubAck with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PubAck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PubAck with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PubAckMultiError, or nil if none found.
func (m *PubAck) ValidateAll() error {
	return m.validate(true)
}

func (m *PubAck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Guid

	// no validation rules for Error

	if len(errors) > 0 {
		return PubAckMultiError(errors)
	}

	return nil
}

// PubAckMultiError is an error wrapping multiple validation errors returned by
// PubAck.ValidateAll() if the designated constraints aren't met.
type PubAckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PubAckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PubAckMultiError) AllErrors() []error { return m }

// PubAckValidationError is the validation error returned by PubAck.Validate if
// the designated constraints aren't met.
type PubAckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PubAckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PubAckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PubAckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PubAckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PubAckValidationError) ErrorName() string { return "PubAckValidationError" }

// Error satisfies the builtin error interface
func (e PubAckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPubAck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PubAckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PubAckValidationError{}

// Validate checks the field values on MsgProto with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MsgProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MsgProto with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MsgProtoMultiError, or nil
// if none found.
func (m *MsgProto) ValidateAll() error {
	return m.validate(true)
}

func (m *MsgProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sequence

	// no validation rules for Subject

	// no validation rules for Reply

	// no validation rules for Data

	// no validation rules for Timestamp

	// no validation rules for Redelivered

	// no validation rules for CRC32

	if len(errors) > 0 {
		return MsgProtoMultiError(errors)
	}

	return nil
}

// MsgProtoMultiError is an error wrapping multiple validation errors returned
// by MsgProto.ValidateAll() if the designated constraints aren't met.
type MsgProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MsgProtoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MsgProtoMultiError) AllErrors() []error { return m }

// MsgProtoValidationError is the validation error returned by
// MsgProto.Validate if the designated constraints aren't met.
type MsgProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MsgProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MsgProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MsgProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MsgProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MsgProtoValidationError) ErrorName() string { return "MsgProtoValidationError" }

// Error satisfies the builtin error interface
func (e MsgProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMsgProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MsgProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MsgProtoValidationError{}

// Validate checks the field values on Ack with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Ack) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ack with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AckMultiError, or nil if none found.
func (m *Ack) ValidateAll() error {
	return m.validate(true)
}

func (m *Ack) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subject

	// no validation rules for Sequence

	if len(errors) > 0 {
		return AckMultiError(errors)
	}

	return nil
}

// AckMultiError is an error wrapping multiple validation errors returned by
// Ack.ValidateAll() if the designated constraints aren't met.
type AckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AckMultiError) AllErrors() []error { return m }

// AckValidationError is the validation error returned by Ack.Validate if the
// designated constraints aren't met.
type AckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AckValidationError) ErrorName() string { return "AckValidationError" }

// Error satisfies the builtin error interface
func (e AckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AckValidationError{}

// Validate checks the field values on ConnectRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConnectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConnectRequestMultiError,
// or nil if none found.
func (m *ConnectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientID

	// no validation rules for HeartbeatInbox

	if len(errors) > 0 {
		return ConnectRequestMultiError(errors)
	}

	return nil
}

// ConnectRequestMultiError is an error wrapping multiple validation errors
// returned by ConnectRequest.ValidateAll() if the designated constraints
// aren't met.
type ConnectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectRequestMultiError) AllErrors() []error { return m }

// ConnectRequestValidationError is the validation error returned by
// ConnectRequest.Validate if the designated constraints aren't met.
type ConnectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectRequestValidationError) ErrorName() string { return "ConnectRequestValidationError" }

// Error satisfies the builtin error interface
func (e ConnectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectRequestValidationError{}

// Validate checks the field values on ConnectResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConnectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConnectResponseMultiError, or nil if none found.
func (m *ConnectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PubPrefix

	// no validation rules for SubRequests

	// no validation rules for UnsubRequests

	// no validation rules for CloseRequests

	// no validation rules for Error

	// no validation rules for SubCloseRequests

	// no validation rules for PublicKey

	if len(errors) > 0 {
		return ConnectResponseMultiError(errors)
	}

	return nil
}

// ConnectResponseMultiError is an error wrapping multiple validation errors
// returned by ConnectResponse.ValidateAll() if the designated constraints
// aren't met.
type ConnectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectResponseMultiError) AllErrors() []error { return m }

// ConnectResponseValidationError is the validation error returned by
// ConnectResponse.Validate if the designated constraints aren't met.
type ConnectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectResponseValidationError) ErrorName() string { return "ConnectResponseValidationError" }

// Error satisfies the builtin error interface
func (e ConnectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectResponseValidationError{}

// Validate checks the field values on SubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscriptionRequestMultiError, or nil if none found.
func (m *SubscriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientID

	// no validation rules for Subject

	// no validation rules for QGroup

	// no validation rules for Inbox

	// no validation rules for MaxInFlight

	// no validation rules for AckWaitInSecs

	// no validation rules for DurableName

	// no validation rules for StartPosition

	// no validation rules for StartSequence

	// no validation rules for StartTimeDelta

	if len(errors) > 0 {
		return SubscriptionRequestMultiError(errors)
	}

	return nil
}

// SubscriptionRequestMultiError is an error wrapping multiple validation
// errors returned by SubscriptionRequest.ValidateAll() if the designated
// constraints aren't met.
type SubscriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscriptionRequestMultiError) AllErrors() []error { return m }

// SubscriptionRequestValidationError is the validation error returned by
// SubscriptionRequest.Validate if the designated constraints aren't met.
type SubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscriptionRequestValidationError) ErrorName() string {
	return "SubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscriptionRequestValidationError{}

// Validate checks the field values on SubscriptionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscriptionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscriptionResponseMultiError, or nil if none found.
func (m *SubscriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AckInbox

	// no validation rules for Error

	if len(errors) > 0 {
		return SubscriptionResponseMultiError(errors)
	}

	return nil
}

// SubscriptionResponseMultiError is an error wrapping multiple validation
// errors returned by SubscriptionResponse.ValidateAll() if the designated
// constraints aren't met.
type SubscriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscriptionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscriptionResponseMultiError) AllErrors() []error { return m }

// SubscriptionResponseValidationError is the validation error returned by
// SubscriptionResponse.Validate if the designated constraints aren't met.
type SubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscriptionResponseValidationError) ErrorName() string {
	return "SubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscriptionResponseValidationError{}

// Validate checks the field values on UnsubscribeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsubscribeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsubscribeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsubscribeRequestMultiError, or nil if none found.
func (m *UnsubscribeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsubscribeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientID

	// no validation rules for Subject

	// no validation rules for Inbox

	// no validation rules for DurableName

	if len(errors) > 0 {
		return UnsubscribeRequestMultiError(errors)
	}

	return nil
}

// UnsubscribeRequestMultiError is an error wrapping multiple validation errors
// returned by UnsubscribeRequest.ValidateAll() if the designated constraints
// aren't met.
type UnsubscribeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsubscribeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsubscribeRequestMultiError) AllErrors() []error { return m }

// UnsubscribeRequestValidationError is the validation error returned by
// UnsubscribeRequest.Validate if the designated constraints aren't met.
type UnsubscribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsubscribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsubscribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsubscribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsubscribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsubscribeRequestValidationError) ErrorName() string {
	return "UnsubscribeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnsubscribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsubscribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsubscribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsubscribeRequestValidationError{}

// Validate checks the field values on CloseRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CloseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CloseRequestMultiError, or
// nil if none found.
func (m *CloseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientID

	if len(errors) > 0 {
		return CloseRequestMultiError(errors)
	}

	return nil
}

// CloseRequestMultiError is an error wrapping multiple validation errors
// returned by CloseRequest.ValidateAll() if the designated constraints aren't met.
type CloseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseRequestMultiError) AllErrors() []error { return m }

// CloseRequestValidationError is the validation error returned by
// CloseRequest.Validate if the designated constraints aren't met.
type CloseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseRequestValidationError) ErrorName() string { return "CloseRequestValidationError" }

// Error satisfies the builtin error interface
func (e CloseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseRequestValidationError{}

// Validate checks the field values on CloseResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CloseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CloseResponseMultiError, or
// nil if none found.
func (m *CloseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Error

	if len(errors) > 0 {
		return CloseResponseMultiError(errors)
	}

	return nil
}

// CloseResponseMultiError is an error wrapping multiple validation errors
// returned by CloseResponse.ValidateAll() if the designated constraints
// aren't met.
type CloseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseResponseMultiError) AllErrors() []error { return m }

// CloseResponseValidationError is the validation error returned by
// CloseResponse.Validate if the designated constraints aren't met.
type CloseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseResponseValidationError) ErrorName() string { return "CloseResponseValidationError" }

// Error satisfies the builtin error interface
func (e CloseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseResponseValidationError{}
