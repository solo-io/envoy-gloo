syntax = "proto3";

package envoy.api.v2.filter.http;

option java_package = "io.envoyproxy.envoy.api.v2.filter.http";
option java_outer_classname = "TransformationFilterProto";
option java_multiple_files = true;
option go_package = "transformation";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "validate/validate.proto";

import "xds/type/matcher/v3/matcher.proto";
import "envoy/config/route/v3/route_components.proto";
import "envoy/type/matcher/v3/string.proto";
import "envoy/config/core/v3/extension.proto";

message FilterTransformations {
  // Specifies transformations based on the route matches. The first matched
  // transformation will be applied. If there are overlapped match conditions,
  // please put the most specific match first.
  repeated TransformationRule transformations = 1;

  // If provided, transformations fields here are ignored. The transformation will be the action from this matcher.
  xds.type.matcher.v3.Matcher matcher = 4;

  // Only RouteTransformations.RouteTransformation with matching stage will be
  // used with this filter.
  uint32 stage = 2 [ (validate.rules).uint32 = {lte : 10} ];

  // Logs request/response sensitive information
  // By default, this is false so no request or response sensitive information is logged.
  // If set to true, the filter will log the request/response body and headers before and
  // after any transformation is applied.
  bool log_request_response_info = 3;
}

message TransformationRule {
  // The route matching parameter. Only when the match is satisfied, the
  // "requires" field will apply.
  //
  // For example: following match will match all requests.
  //
  // .. code-block:: yaml
  //
  //    match:
  //      prefix: /
  //
  envoy.config.route.v3.RouteMatch match = 1
      [ (validate.rules).message = {required : true} ];

  message Transformations {
    // Apply a transformation to requests.
    Transformation request_transformation = 1;
    // Clear the route cache if the request transformation was applied.
    bool clear_route_cache = 3;
    // Apply a transformation to responses.
    Transformation response_transformation = 2;
    // Apply a transformation in the onStreamComplete callback
    Transformation on_stream_completion_transformation = 4;
  }
  // transformation to perform
  Transformations route_transformations = 2;
}

message RouteTransformations {
  // deprecated. Use transformations[].request_match.request_transformation
  // instead.
  Transformation request_transformation = 1 [ deprecated = true ];
  // deprecated. Use transformations[].request_match.response_transformation
  // instead.
  Transformation response_transformation = 2 [ deprecated = true ];
  // deprecated. Use transformations[].request_match.clear_route_cache instead.
  bool clear_route_cache = 3 [ deprecated = true ];

  message RouteTransformation {
    // Stage number. This transformation will only be processed by filters with
    // the same stage number.
    uint32 stage = 1 [ (validate.rules).uint32 = {lte : 10} ];

    message RequestMatch {
      // if no match is specified, will match all
      envoy.config.route.v3.RouteMatch match = 1;
      // transformation to perform
      Transformation request_transformation = 2;
      Transformation response_transformation = 3;
      // clear the route cache if the request transformation was applied
      bool clear_route_cache = 4;
    }

    message ResponseMatch {
      ResponseMatcher match = 1;
      // transformation to perform
      Transformation response_transformation = 2;
    }

    oneof match {
      option (validate.required) = true;
      RequestMatch request_match = 2;
      ResponseMatch response_match = 3;
    }
    // If provided, transformations with request_match in transformations field are ignored.
    // The transformation will be the action from this matcher.
    xds.type.matcher.v3.Matcher matcher = 5;
  }

  repeated RouteTransformation transformations = 4;

}

message ResponseMatcher {
  // Specifies a set of headers that the route should match on. The router will
  // check the response headers against all the specified headers in the route
  // config. A match will happen if all the headers in the route are present in
  // the request with the same values (or based on presence if the value field
  // is not in the config).
  repeated envoy.config.route.v3.HeaderMatcher headers = 1;

  // Only match responses with non empty response code details (this usually
  // implies a local reply).
  envoy.type.matcher.v3.StringMatcher response_code_details = 2;
}

message ResponseTransformationRule {
  ResponseMatcher match = 1;
  // transformation to perform
  Transformation response_transformation = 2;
}

// This message defines a transformation.
message Transformation {
  // The type of transformation to apply.
  oneof transformation_type {
    // Apply transformation templates.
    TransformationTemplate transformation_template = 1;
    // This type of transformation will make all the headers available in the
    // response body. The resulting JSON body will consist of two attributes:
    // 'headers', containing the headers, and 'body', containing the original
    // body.
    HeaderBodyTransform header_body_transform = 2;
    // Configuration for an externally implemented transformer.
    envoy.config.core.v3.TypedExtensionConfig transformer_config = 3;
  }

  // Logs request/response sensitive information
  // By default, this is false so no request or response sensitive information is logged.
  // If set to true, the filter will log the request/response body and headers before and
  // after this transformation is applied.
  google.protobuf.BoolValue log_request_response_info = 4;
}

// Extractions can be used to extract information from the request/response.
// The extracted information can then be referenced in template fields.
message Extraction {
  // The mode of operation for the extraction.
  enum Mode {
    // Default mode. Extract the value of the subgroup-th capturing group.
    EXTRACT = 0; 
    // Replace the value of the subgroup-th capturing group with the replacement_text.
    // Note: replacement_text must be set for this mode.
    SINGLE_REPLACE = 1;
    // Replace all matches of the regex in the source with the replacement_text.
    // Note: replacement_text must be set for this mode.
    // Note: subgroup is ignored for this mode. configuration will fail if subgroup is set.
    // Note: restrictions on the regex are different for this mode. See the regex field for more details.
    REPLACE_ALL = 2;
  }

  // The source of the extraction
  oneof source {
    // Extract information from headers
    string header = 1;
    // Extract information from the request/response body
    google.protobuf.Empty body = 4;
  }

  // The regex field specifies the regular expression used for matching against the source content. This field is required.
  // - In EXTRACT mode, the entire source must match the regex. The subgroup-th capturing group,
  //   if specified, determines which part of the match is extracted. if the regex does not match the source
  //   the result of the extraction will be an empty value.
  // - In SINGLE_REPLACE mode, the regex also needs to match the entire source. The subgroup-th capturing group
  //   is targeted for replacement with the replacement_text. if the regex does not match the source
  //   the result of the extraction will be the source itself.
  // - In REPLACE_ALL mode, the regex is applied repeatedly to find all occurrences within the source that match.
  //   Each matching occurrence is replaced with the replacement_text, and the subgroup field is not used. if the 
  //   regex does not match the source the result of the extraction will be the source itself.
  string regex = 2;

  // If your regex contains capturing groups, use this field to determine which
  // group should be selected.
  // For EXTRACT and SINGLE_REPLACE, refers to the portion of the text
  // to extract/replace.
  // Config will be rejected if this is specified in REPLACE_ALL mode.
  uint32 subgroup = 3;
  
  // Used in SINGLE_REPLACE and REPLACE_ALL modes.
  // `replacement_text` is used to format the substitution for matched sequences in the input string
  // - In SINGLE_REPLACE mode, the content in the subgroup-th capturing group is replaced with the `replacement_text`.
  // - In REPLACE_ALL mode, each sequence matching the specified regex in the in the input is replaced with the `replacement_text`.
  //     The replacement_text may contain special syntax, such as $1, $2, etc., to refer to captured groups within the regular expression.
  //     The value contained within `replacement_text` is treated as a string, and is passed to std::regex_replace as the replacement string.
  //     see https://en.cppreference.com/w/cpp/regex/regex_replace for more details.
  google.protobuf.StringValue replacement_text = 5;

  // The mode of operation for the extraction.
  // Defaults to EXTRACT.
  Mode mode = 6;
}

// Defines a transformation template.
message TransformationTemplate {

  // If set to true, use JSON pointer notation (e.g. "time/start") instead of
  // dot notation (e.g. "time.start") to access JSON elements. Defaults to
  // false.
  //
  // Please note that, if set to 'true', you will need to use the `extraction`
  // function to access extractors in the template (e.g. '{{
  // extraction("my_extractor") }}'); if the default value of 'false' is used,
  // extractors will simply be available by their name (e.g. '{{ my_extractor
  // }}').
  bool advanced_templates = 1;

  // Use this attribute to extract information from the request. It consists of
  // a map of strings to extractors. The extractor will defines which
  // information will be extracted, while the string key will provide the
  // extractor with a name. You can reference extractors by their name in
  // templates, e.g. "{{ my-extractor }}" will render to the value of the
  // "my-extractor" extractor.
  map<string, Extraction> extractors = 2;

  // Use this attribute to transform request/response headers. It consists of a
  // map of strings to templates. The string key determines the name of the
  // resulting header, the rendered template will determine the value. Any existing
  // headers with the same header name will be replaced by the transformed header.
  // If a header name is included in `headers` and `headers_to_append`, it will first
  // be replaced the template in `headers`, then additional header values will be appended
  // by the templates defined in `headers_to_append`.
  map<string, InjaTemplate> headers = 3;

  // Defines a header-template pair to be used in `headers_to_append`
  message HeaderToAppend {
    // Header name
    string key = 1;
    // Apply a template to the header value
    InjaTemplate value = 2;
  }

  // Use this attribute to transform request/response headers. It consists of
  // an array of string/template objects. Use this attribute to define multiple
  // templates for a single header. Header template(s) defined here will be appended to any
  // existing headers with the same header name, not replace existing ones.
  repeated HeaderToAppend headers_to_append = 10;

  repeated string headers_to_remove = 11;

  // Determines the type of transformation to apply to the request/response body
  oneof body_transformation {
    // Apply a template to the body
    InjaTemplate body = 4;
    // This will cause the transformation filter not to buffer the body.
    // Use this setting if the response body is large and you don't need to
    // transform nor extract information from it.
    Passthrough passthrough = 5;
    // Merge all defined extractors to the request/response body.
    // If you want to nest elements inside the body, use dot separator in the
    // extractor name.
    MergeExtractorsToBody merge_extractors_to_body = 6;
    // A set of key-value pairs to merge into the JSON body.
    // Each value will be rendered separately, and then placed into the JSON body at
    // the specified key.
    // There are a number of important caveats to using this feature:
    // * This can only be used when the body is parsed as JSON.
    // * This option does NOT work with advanced templates currently
    MergeJsonKeys merge_json_keys = 13;
  }

  // Determines how the body will be parsed.
  enum RequestBodyParse {
    // Will attempt to parse the request/response body as JSON
    ParseAsJson = 0;
    // The request/response body will be treated as plain text
    DontParse = 1;
  }
  RequestBodyParse parse_body_behavior = 7;

  // If set to true, Envoy will not throw an exception in case the body parsing
  // fails.
  bool ignore_error_on_parse = 8;

  // Defines an [Envoy Dynamic
  // Metadata](https://www.envoyproxy.io/docs/envoy/latest/configuration/advanced/well_known_dynamic_metadata)
  // entry.
  message DynamicMetadataValue {

    // The metadata namespace. Defaults to the filter namespace.
    string metadata_namespace = 1;

    // The metadata key.
    string key = 2 [ (validate.rules).string = {min_bytes : 1} ];

    // A template that determines the metadata value.
    InjaTemplate value = 3;

    // Instruct the filter to parse the rendered value as a proto Struct message
    // before setting it as the metadata value.
    bool json_to_proto = 4;
  }
  // Use this field to set Dynamic Metadata.
  repeated DynamicMetadataValue dynamic_metadata_values = 9;

  // Use to escape the output of a body transformation. This will cause
  // rendered string values to be escaped in order to make valid JSON/YAML strings
  bool escape_characters = 12;

  // The character to use as a delimiter when accessing dynamic metadata values
  // in templates. Defaults to ':' if unset.
  // See https://www.envoyproxy.io/docs/envoy/v1.31.1/configuration/observability/access_log/usage.html#config-access-log-format-dynamic-metadata
  // for more information.
  string string_delimiter = 14;

}

// Defines an [Inja template](https://github.com/pantor/inja) that will be
// rendered by Gloo. In addition to the core template functions, the Gloo
// transformation filter defines the following custom functions:
// - header(header_name): returns the value of the header with the given name
// - extraction(extractor_name): returns the value of the extractor with the
// given name
// - env(env_var_name): returns the value of the environment variable with the
// given name
// - body(): returns the request/response body
// - context(): returns the base JSON context (allowing for example to range on
// a JSON body that is an array)
message InjaTemplate { string text = 1; }

message Passthrough {}

message MergeExtractorsToBody {}

message MergeJsonKeys {
  message OverridableTemplate {
    // Template to render
    InjaTemplate tmpl = 1;
    // If set to true, the template will be set even if the rendered value is empty.
    bool override_empty = 2;
  }
  /* 
    Map of key name -> template to render into the JSON body
    For example, given the following JSON body:
    {
      "key1": "value1"
    }
    and the following MergeJsonKeys:
    {
      "key1": "{{ header("header1") }}",
      "key2": "{{ header("header2") }}"
    }
    The resulting JSON body will be:
    {
      "key1": "header1_value",
      "key2": "header2_value"
    }
  */
  map<string, OverridableTemplate> json_keys = 2;
}

message HeaderBodyTransform {
  // When transforming a request, setting this to true will additionally add
  // "queryString", "queryStringParameters", "multiValueQueryStringParameters",
  // "multiValueHeaders", "httpMethod" and "path" to the body.
  // NOTE: To match the AWS API Gateway spec, multiValueQueryStringParameters
  // and multiValueHeaders only contain query params and headers with multiple
  // values. Query params and Headers with a single value will not be present
  // in the multiValue fields.
  bool add_request_metadata = 1;
}
