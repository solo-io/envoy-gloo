syntax = "proto3";

package envoy.config.filter.http.aws_lambda.v2;

option java_package = "io.envoyproxy.envoy.config.filter.http.aws_lambda.v2";
option java_outer_classname = "AwsLambdaProto";
option java_multiple_files = true;
import "google/protobuf/wrappers.proto";
import "validate/validate.proto";

// [#protodoc-title: AWS Lambda]
// AWS Lambda

// AWS Lambda contains the configuration necessary to perform transform regular
// http calls to AWS Lambda invocations.
message AWSLambdaPerRoute {
  // The name of the function
  string name = 1 [ (validate.rules).string.min_bytes = 1 ];
  // The qualifier of the function (defualts to $LATEST if not specified)
  string qualifier = 2;

  // Invocation type - async or regular.
  bool async = 3;

  // Optional default body if the body is empty. By default on default
  // body is used if the body empty, and an empty body will be sent upstream.
  google.protobuf.StringValue empty_body_override = 4;
}

message AWSLambdaProtocolExtension {
  // The host header for AWS this cluster
  string host = 1 [ (validate.rules).string.min_bytes = 1 ];
  // The region for this cluster
  string region = 2 [ (validate.rules).string.min_bytes = 1 ];
  // The access_key for AWS this cluster
  string access_key = 3 [ (validate.rules).string.min_bytes = 1 ];
  // The secret_key for AWS this cluster
  string secret_key = 4 [ (validate.rules).string.min_bytes = 1 ];
}
